@model DoreanSportic.Application.DTOs.PedidoDTO
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Details";
}

<div style="margin-left:10%; margin-right:15%">
    <div class="py-4">
        <a class="btn btn-sm btn-outline bg-[#006400] text-white w-50" asp-action="Index">
            @(Localizer["Volver al listado"])
        </a>
    </div>

    <div class="mb-4 max-w-4xl mx-auto p-6 bg-white text-slate-500 shadow-md rounded mt-10 border rounded font-sans">
        <!-- Header de la “factura” (marca/empresa) -->
        <div class="border-b pb-8 mb-8 flex items-center">
            <div class="flex-1 text-left p-2">
                <img src="@Url.Content("~/Assets/DoreanSporticLogo.png")" asp-append-version="true"
                     alt="Company Logo" class="h-10 w-25 mr-4">
                <p class="text-sm text-slate-500"><b>Dorean Sportic S.A.</b></p>
                <p class="text-sm text-slate-500"><b>@(Localizer["Dirección"]): </b>San Juan, Santa Bárbara, Heredia, Costa Rica.</p>
                <p class="text-sm text-slate-500"><b>@(Localizer["Teléfono"]): </b>72969719</p>
                <p class="text-sm text-slate-500"><b>@(Localizer["Correo electrónico"]):</b> doreansportic@gmail.com</p>
            </div>
        </div>

        @* Encabezado tipo factura *@
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            @* Columna izquierda: selector de usuario y resumen del cliente *@
            <div class="space-y-3">
                <p class="text-sm text-slate-500">
                    <b>@(Localizer["Pedido"]) #:</b> <u>@Model.Id</u>
                </p>

                <label class="font-semibold text-slate-700">@Localizer["Usuario que solicita"]</label>

                <!-- Selector de usuario (si solo es el actual, dejamos una única opción) -->
                <select id="selector-usuario"
                        class="select select-bordered w-full"
                        data-pedido-id="@Model.Id"
                        data-current-user-id="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value">
                    <option value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" selected>
                        @User.Identity?.Name
                    </option>
                    @* Si más adelante permites cambiar el usuario (p.e. admin), agrega más <option> aquí *@
                </select>

                <!-- Resumen no editable del cliente -->
                <div id="cliente-resumen" class="p-3 rounded border">
                    <div>
                        <b>@Localizer["Cliente"]:</b>
                        <span id="cliente-nombre">
                            @Model.IdClienteNavigation?.Nombre @Model.IdClienteNavigation?.Apellido
                        </span>
                    </div>
                    <div>
                        <b>@Localizer["Correo"]:</b>
                        <span id="cliente-email">@Model.IdClienteNavigation?.Email</span>
                    </div>
                    <div>
                        <b>@Localizer["Teléfono"]:</b>
                        <span id="cliente-telefono">@Model.IdClienteNavigation?.Telefono</span>
                    </div>
                </div>
            </div>

            @* Columna derecha: fecha / estado / dirección envío + botón guardar *@
            <div class="space-y-3">
                <div>
                    <b>@Localizer["Fecha del pedido"]:</b> @Model.FechaPedido.ToString("dd/MM/yyyy")
                    <div class="text-xs text-slate-400">
                        <i>@Localizer["Hora de emisión"]: @Model.FechaPedido.ToString("HH:mm:ss") (@Localizer["Formato de 24 horas"])</i>
                    </div>
                </div>

                <div>
                    <b>@Localizer["Estado"]:</b>
                    <span id="pedido-estado">@Model.IdMetodoPagoNavigation?.Nombre</span>
                </div>

                <!-- Dirección de envío (editable) -->
                <label for="direccion-envio" class="font-semibold text-slate-700">
                    @Localizer["Dirección de envío"]
                </label>
                <textarea id="direccion-envio"
                          class="textarea textarea-bordered w-full"
                          rows="3"
                          placeholder="@Localizer["Ingrese la dirección de envío"]">@Model.DireccionEnvio</textarea>

                <div class="flex items-center gap-3">
                    <button id="btn-guardar-encabezado" class="btn btn-primary">
                        @Localizer["Guardar encabezado"]
                    </button>
                    <span id="save-status" class="text-sm"></span>
                </div>
            </div>
        </div>

        <!-- Detalle del pedido (tabla renderizada vía parcial) -->
        <div id="tabla-detalles">
            <p class="text-sm">@(Localizer["Cargando detalles del pedido"])</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Carga parcial de detalles
        fetch('/PedidoDetalle/GetDetallesPorPedido?idPedido=@Model.Id')
            .then(r => r.text())
            .then(html => { document.getElementById("tabla-detalles").innerHTML = html; })
            .catch(() => { document.getElementById("tabla-detalles").innerHTML = "<p>Error cargando detalles.</p>"; });

        // Guardar encabezado (dirección, usuario, etc.)
        document.getElementById('btn-guardar-encabezado')?.addEventListener('click', async () => {
            const pedidoId = document.getElementById('selector-usuario')?.dataset.pedidoId;
            const userId = document.getElementById('selector-usuario')?.value;
            const direccion = document.getElementById('direccion-envio')?.value ?? '';
            const status = document.getElementById('save-status');

            try {
                const resp = await fetch('/Pedido/ActualizarEncabezado', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Si tu acción exige AntiForgeryToken, añade el token aquí
                        //'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ pedidoId, userId, direccionEnvio: direccion })
                });

                const data = await resp.json();
                if (data?.success) {
                    // Actualiza estado si vuelve desde servidor, o deja el que ya muestra
                    if (data.estadoNombre) {
                        document.getElementById('pedido-estado').textContent = data.estadoNombre;
                    }
                    status.textContent = '@Localizer["Encabezado guardado"]';
                    status.className = 'text-sm text-green-600';
                } else {
                    status.textContent = data?.mensaje || '@Localizer["No fue posible guardar"]';
                    status.className = 'text-sm text-red-600';
                }
            } catch {
                status.textContent = '@Localizer["Error inesperado"]';
                status.className = 'text-sm text-red-600';
            } finally {
                setTimeout(() => { status.textContent = ""; }, 2500);
            }
        });

        // Cambio de usuario (si en algún momento permites varios)
        document.getElementById('selector-usuario')?.addEventListener('change', async (e) => {
            const userId = e.target.value;
            try {
                const r = await fetch(`/Cliente/GetByUserId?userId=${encodeURIComponent(userId)}`);
                const cliente = await r.json();
                // Refresca panel cliente
                document.getElementById('cliente-nombre').textContent = `${cliente?.nombre ?? ''} ${cliente?.apellido ?? ''}`.trim();
                document.getElementById('cliente-email').textContent = cliente?.email ?? '';
                document.getElementById('cliente-telefono').textContent = cliente?.telefono ?? '';
            } catch {
                // opcional: mostrar un pequeño aviso
            }
        });
    </script>
}