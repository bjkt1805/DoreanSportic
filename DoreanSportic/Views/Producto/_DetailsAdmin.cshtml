@model DoreanSportic.Web.ViewModel.DetalleProductoViewModel

@using DoreanSportic.Infrastructure.Models

@using System.Globalization
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<!-- Para el separador de miles-->
@{
    var culturaPersonalizada = (CultureInfo)CultureInfo.InvariantCulture.Clone();
    culturaPersonalizada.NumberFormat.NumberGroupSeparator = " "; // separador de miles
    culturaPersonalizada.NumberFormat.NumberDecimalSeparator = "."; // separador decimal
}

<div class="flex flex-row gap-6 w-full max-w-6xl mx-auto">
    <div class="flex flex-row gap-5" id="detalle-producto" data-id="@Model.Producto.Id"></div>
    <div class="flex flex-col gap-4 w-full lg:w-3/4">
        <div class="flex flex-row gap-4">
         <a href="javascript:void(0);"
               class="btn btn-sm btn-outline bg-[#006400] text-white w-50"
               onclick="cargarVista('/Producto/IndexAdmin')">
                @(Localizer["Volver al listado"])
            </a>
            <a href="javascript:void(0);"
               class="btn btn-sm btn-outline bg-warning text-black w-50"
               onclick="cargarEditarProducto(@Model.Producto.Id)">
                @(Localizer["Editar producto"])
            </a>
        </div>
        <h1>
            <b>
                @(Localizer["DETALLE DEL PRODUCTO"])
            </b>
        </h1>
        <!-- Cargar los cards de los productos -->
        <div class="card card-side flex-row bg-base rounded-3">

            <figure class="w-1/3 p-4 flex flex-col items-start justify-center">
                <div class="carousel w-75 rounded-xl">
                    @for (int i = 0; i < Model.Producto.ImagenesProducto.Count; i++)
                    {
                        var img = Model.Producto.ImagenesProducto.ElementAt(i).Imagen;
                        var id = $"slide{i + 1}";
                        <div id="@id" class="carousel-item hidden w-full h-full flex justify-center items-center">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(img)"
                                 class="w-full h-50 object-contain rounded-xl" />
                        </div>
                    }
                </div>

                <!-- Navegación del carrusel -->
                <div class="flex justify-center mt-2 gap-2 mt-2">
                    @for (int i = 0; i < Model.Producto.ImagenesProducto.Count; i++)
                    {
                        var id = $"slide{i + 1}";
                        <a href="#@id" class="btn btn-xs">@(i + 1)</a>
                    }
                </div>
            </figure>

            <div class="card-body w-100">
                <div class="flex flex-col gap-2">
                    <div class="flex flex-row gap gap-1">
                        <div class="badge bg-primary text-white">@(Model.Producto.IdCategoriaNavigation.Nombre.ToUpper())</div>
                        <div class="badge bg-[#000000] text-white">@(Model.Producto.IdMarcaNavigation.Nombre.ToUpper())</div>
                        <!-- Revisar si hay cantidad disponible del producto. Si no hay stock/cantidad, poner AGOTADO
                            caso contrario poner DISPONIBLE
                        -->
                        @{
                            if (Model.Producto.Stock == 0)
                            {
                                <div class="badge bg-[#FF0000] text-white">
                                    @(Localizer["AGOTADO"])
                                </div>
                            }
                            else
                            {
                                <div class="badge bg-[#50C878] text-white">
                                    @(Localizer["DISPONIBLE"])
                                </div>
                            }
                        }
                        <!-- Código Razor para mostrar el badge de "EN OFERTA" en caso de que
                            exista una promoción
                        -->
                        @if ((Model.Producto.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false) ||
                                                (Model.Producto.IdCategoriaNavigation?.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false))
                        {
                            <div class="badge badge-secondary">
                                @(Localizer["OFERTA"])
                            </div>
                        }
                    </div>

                    <!-- Para mostrar las etiquetas del producto (Envio, Original, Garantia, etc.)-->
                    <div class="flex flex-wrap gap-1 mt-2">
                        @if (Model.Producto.IdEtiqueta != null && Model.Producto.IdEtiqueta.Count > 0)
                        {
                            foreach (var etiqueta in Model.Producto.IdEtiqueta)
                            {
                                <div class="badge badge-soft badge-secondary">@etiqueta.Nombre.ToUpper()</div>
                            }
                        }
                    </div>
                </div>

                <h2 class="card-title text-xl font-semibold">
                    @Html.DisplayFor(model => model.Producto.Nombre)
                </h2>
                @{
                    decimal precioBase = Model.Producto.PrecioBase;
                    DateTime hoy = DateTime.Today;

                    // Obtener promociones activas por producto
                    var promocionesProductoActivas = Model.Producto.IdPromocion
                    .Where(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);

                    decimal descuentoProducto = promocionesProductoActivas.Sum(p => p.PorcentajeDescuento ?? 0);

                    // Obtener promociones activas por categoría (si existen)
                    IEnumerable<Promocion> promocionesCategoriaActivas = Enumerable.Empty<Promocion>();

                    if (Model.Producto.IdCategoriaNavigation?.IdPromocion != null)
                    {
                        promocionesCategoriaActivas = Model.Producto.IdCategoriaNavigation.IdPromocion
                        .Where(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);
                    }

                    decimal descuentoCategoria = promocionesCategoriaActivas.Sum(p => p.PorcentajeDescuento ?? 0);

                    // Sumar ambos descuentos
                    decimal descuentoTotal = descuentoProducto + descuentoCategoria;

                    // Límite opcional a 100%
                    if (descuentoTotal > 100) descuentoTotal = 100;
                    var precioConDescuento = precioBase - (precioBase * descuentoTotal / 100);
                }

                @if (descuentoTotal > 0)
                {
                    <div class="p-2 w-75 flex flex-col ml-2 gap gap-1 rounded-lg border border-base-300">
                        <div class="flex flex-row gap gap-1 text-xs text-gray-400">
                            <b>
                                @(Localizer["Precio anterior"]):
                            </b><span class="line-through">₡@precioBase.ToString("N2", culturaPersonalizada)</span>
                            <div class="badge bg-[#FF0000] badge-xl text-white font-bold">
                                - @descuentoTotal.ToString("0")%
                            </div>
                        </div>
                        <div class="flex flex-row gap gap-1">
                            <b>
                                @(Localizer["Precio en oferta"]):
                            </b>
                            <div class="badge badge-xl bg-success text-black font-bold">
                                ₡@precioConDescuento.ToString("N2", culturaPersonalizada) + I.V.A
                            </div>

                        </div>
                    </div>
                }
                else
                {
                    <div class="flex flex-row gap gap-1">
                        <b class="mt-1">
                            @(Localizer["Precio base"]):
                        </b>
                        <div class="badge badge-outline w-fit">
                            ₡@precioBase.ToString("N2", culturaPersonalizada) + I.V.A
                        </div>
                    </div>

                }
                <p class="text-base bg-base w-auto" style="text-align: justify">
                    @Html.DisplayFor(model => model.Producto.Descripcion)
                </p>

            </div>

        </div>

    </div>

    <div class="flex flex-col gap gap-4 ">
        @{
            var promedio = Model.Resennas.Any() ? Model.Resennas.Average(r => r.Calificacion) : 0;
            var promedioEntero = (int)Math.Floor(promedio); // para estrellas completas
        }
        <div class="flex w-75 items-center gap-2 mb-4">
            <span class="font-bold">
                @(Localizer["PROMEDIO DE CALIFICACIÓN"]): @promedio.ToString("0.0")
            </span>
            <div class="flex gap-1">
                @for (int i = 1; i <= 5; i++)
                {
                    var fillColor = i <= promedioEntero ? "text-warning" : "text-gray-300";

                    <svg xmlns="http://www.w3.org/2000/svg"
                         fill="currentColor"
                         viewBox="0 0 24 24"
                         stroke="none"
                         class="w-5 h-5 @fillColor">
                        <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                                             1.402 8.175L12 18.896l-7.336 3.861
                                             1.402-8.175-5.934-5.782 8.2-1.192z" />
                    </svg>
                }
            </div>
        </div>

        <!-- Cargar las reseñas de los usuarios-->
        <div id="zona-resennas" class="w-full">
            <p class="text-sm">
                @(Localizer["Cargando reseñas..."])
            </p>
        </div>
    </div>


</div>


