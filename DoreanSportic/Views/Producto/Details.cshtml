@model DoreanSportic.Application.DTOs.ProductoDTO

@{
    ViewData["Title"] = "Details";
}


<div class="flex flex-row gap-2">
    <div class="justify-start">
        <h1><b>Detalles del producto</b></h1>
        @*     @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
 *@    </div>
    <div class="justify-end">
        <a class="justify-end" asp-action="Index">Volver al listado</a>
    </div>

</div>

<div class="card card-side flex-row bg-base shadow-lg rounded-3">

    <figure class="w-1/3 p-4 flex flex-col items-start justify-center">
        <div class="carousel w-75 rounded-xl">
            @for (int i = 0; i < Model.ImagenesProducto.Count; i++)
            {
                var img = Model.ImagenesProducto.ElementAt(i).Imagen;
                var id = $"slide{i + 1}";
                <div id="@id" class="carousel-item w-full justify-center items-center">
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(img)"
                         class="w-full h-50 object-contain rounded-xl" />
                </div>
            }
        </div>

        <!-- Navegación del carrusel -->
        <div class="flex justify-center mt-2 gap-2 mt-2">
            @for (int i = 0; i < Model.ImagenesProducto.Count; i++)
            {
                var id = $"slide{i + 1}";
                <a href="#@id" class="btn btn-xs">@(i + 1)</a>
            }
        </div>
    </figure>

    <div class="card-body w-75">
        <div class="flex flex-row gap gap-1">
            <div class="badge bg-primary text-white">@(Model.IdCategoriaNavigation.Nombre.ToUpper())</div>
            <div class="badge badge-secondary">HOT SALE!</div>
        </div>

        <h2 class="card-title text-xl font-semibold">
            @Html.DisplayFor(model => model.Nombre)
        </h2>
        <p class="text-base bg-base w-auto">
            @Html.DisplayFor(model => model.Descripcion)
        </p>

    </div>
</div>

<br />

<div id="zona-resennas">
    <p class="text-sm">Cargando reseñas...</p>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const totalSlides = @Model.ImagenesProducto.Count;
            let currentSlide = 1;

            setInterval(() => {
                const nextSlide = currentSlide >= totalSlides ? 1 : currentSlide + 1;
                location.hash = `#slide${nextSlide}`;
                currentSlide = nextSlide;
            }, 3000); // cambia cada 3 segundos (3000ms)
        });
    </script>

@*     Script para cargar las reseñas del producto
 *@    <script>
        fetch('/ResennaValoracion/GetResennasPorProducto?idProducto=@Model.Id')
            .then(response => response.text())
            .then(html => {
                document.getElementById("zona-resennas").innerHTML = html;
            })
            .catch(error => {
                document.getElementById("zona-resennas").innerHTML = "<p>Error cargando reseñas.</p>";
            });
    </script>

}
