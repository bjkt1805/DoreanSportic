@model DoreanSportic.Web.ViewModel.DetalleProductoViewModel


@using DoreanSportic.Infrastructure.Models
@using System.Globalization

<!-- Para el separador de miles-->
@{
    var culturaPersonalizada = (CultureInfo)CultureInfo.InvariantCulture.Clone();
    culturaPersonalizada.NumberFormat.NumberGroupSeparator = " "; // separador de miles
    culturaPersonalizada.NumberFormat.NumberDecimalSeparator = "."; // separador decimal
}

@{
    ViewData["Title"] = "Details";
}

<!-- Mostrar la fecha de hoy (solo lectura) -->
@{
    var hoy = DateTime.Today;
}


<div class="p-4 flex flex-row gap-5">
    <div class="flex flex-col gap-2">
        <div class="flex flex-row justify-between">
            <a class="btn btn-sm btn-outline bg-[#006400] text-white w-50" asp-action="Index">Volver al listado</a>

            <!-- Botón para dejar reseña -->
            <button class="btn btn-sm btn-outline font-bold bg-warning text-black w-50"
                    onclick="modalResenna.showModal()">
                Dejar reseña
            </button>

        </div>
        <h1><b>DETALLE DEL PRODUCTO</b></h1>
        <div class="flex flex-row gap-5">
            <div class="justify-start"></div>
            <div class="ml-auto">
            </div>
        </div>
        <!-- Cargar los cards de los productos -->
        <div class="card card-side flex-row bg-base shadow-lg rounded-3">

            <figure class="w-1/3 p-4 flex flex-col items-start justify-center">
                <div class="carousel w-75 rounded-xl">
                    @for (int i = 0; i < Model.Producto.ImagenesProducto.Count; i++)
                    {
                        var img = Model.Producto.ImagenesProducto.ElementAt(i).Imagen;
                        var id = $"slide{i + 1}";
                        <div id="@id" class="carousel-item hidden w-full h-full flex justify-center items-center">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(img)"
                                 class="w-full h-50 object-contain rounded-xl" />
                        </div>
                    }
                </div>

                <!-- Navegación del carrusel -->
                <div class="flex justify-center mt-2 gap-2 mt-2">
                    @for (int i = 0; i < Model.Producto.ImagenesProducto.Count; i++)
                    {
                        var id = $"slide{i + 1}";
                        <a href="#@id" class="btn btn-xs">@(i + 1)</a>
                    }
                </div>
            </figure>

            <div class="card-body w-100">
                <div class="flex flex-col gap-2">
                    <div class="flex flex-row gap gap-1">

                        <!-- Etiquetas-->
                        <div class="badge bg-primary text-white">@(Model.Producto.IdCategoriaNavigation.Nombre.ToUpper())</div>
                        <div class="badge bg-[#000000] text-white">@(Model.Producto.IdMarcaNavigation.Nombre.ToUpper())</div>
                        <!-- Revisar si hay cantidad disponible del producto. Si no hay stock/cantidad, poner AGOTADO
                            caso contrario poner DISPONIBLE
                        -->
                        @{
                            if (Model.Producto.Stock == 0)
                            {
                                <div class="badge bg-[#FF0000] text-white">AGOTADO</div>
                            }
                            else
                            {
                                <div class="badge bg-[#50C878] text-white">DISPONIBLE</div>
                            }
                        }
                        <!-- Código Razor para mostrar el badge de "EN OFERTA" en caso de que
                            exista una promoción
                        -->
                        @if ((Model.Producto.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false) ||
                                                (Model.Producto.IdCategoriaNavigation?.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false))
                        {
                            <div class="badge badge-secondary">OFERTA</div>
                        }

                    </div>

                    <!-- Para mostrar las etiquetas del producto (Envio, Original, Garantia, etc.)-->
                    <div class="flex flex-wrap gap-1 mt-2">
                        @if (Model.Producto.IdEtiqueta != null && Model.Producto.IdEtiqueta.Count > 0)
                        {
                            foreach (var etiqueta in Model.Producto.IdEtiqueta)
                            {
                                <div class="badge badge-soft badge-secondary">@etiqueta.Nombre.ToUpper()</div>
                            }
                        }
                    </div>

                </div>


                <h2 class="card-title text-xl font-semibold">
                    @Html.DisplayFor(model => model.Producto.Nombre)
                </h2>
                @{
                    decimal precioBase = Model.Producto.PrecioBase;

                    // Obtener promociones activas por producto
                    var promocionesProductoActivas = Model.Producto.IdPromocion
                    .Where(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);

                    decimal descuentoProducto = promocionesProductoActivas.Sum(p => p.PorcentajeDescuento ?? 0);

                    // Obtener promociones activas por categoría (si existen)
                    IEnumerable<Promocion> promocionesCategoriaActivas = Enumerable.Empty<Promocion>();

                    if (Model.Producto.IdCategoriaNavigation?.IdPromocion != null)
                    {
                        promocionesCategoriaActivas = Model.Producto.IdCategoriaNavigation.IdPromocion
                        .Where(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);
                    }

                    decimal descuentoCategoria = promocionesCategoriaActivas.Sum(p => p.PorcentajeDescuento ?? 0);

                    // Sumar ambos descuentos
                    decimal descuentoTotal = descuentoProducto + descuentoCategoria;

                    // Límite opcional a 100%
                    if (descuentoTotal > 100) descuentoTotal = 100;
                    var precioConDescuento = precioBase - (precioBase * descuentoTotal / 100);
                }

                @if (descuentoTotal > 0)
                {
                    <div class="p-2 w-75 flex flex-col ml-2 gap gap-1 rounded-lg border border-base-300">
                        <div class="flex flex-row gap gap-1 text-xs text-gray-400">
                            <b>Precio anterior: </b><span class="line-through">₡@precioBase.ToString("N2", culturaPersonalizada)</span>
                            <div class="badge bg-[#FF0000] badge-xl text-white font-bold">
                                - @descuentoTotal.ToString("0")%
                            </div>
                        </div>
                        <div class="flex flex-row gap gap-1">
                            <b>Precio en oferta: </b>
                            <div class="badge badge-xl bg-success text-black font-bold">
                                ₡@precioConDescuento.ToString("N2", culturaPersonalizada) + I.V.A
                            </div>

                        </div>
                    </div>
                }
                else
                {
                    <div class="flex flex-row gap gap-1">
                        <b class="mt-1">Precio base: </b>
                        <div class="badge badge-outline w-fit">
                            <b>₡@precioBase.ToString("N2", culturaPersonalizada)</b> + I.V.A
                        </div>
                    </div>

                }
                <p class="text-base bg-base w-auto" style="text-align: justify">
                    @Html.DisplayFor(model => model.Producto.Descripcion)
                </p>

            </div>
        </div>
    </div>



    <div class="flex flex-col gap gap-4 ">
        
        <!-- Para cargar dinámicamente el promedio de los usuarios -->
        <div id="zona-promedio">
            <p class="text-sm">Cargando promedio...</p>
        </div>

        <!-- Cargar las reseñas de los usuarios-->
        <div id="zona-resennas">
            <p class="text-sm">Cargando reseñas...</p>
        </div>
    </div>




</div>

<!-- Modal para enviar reseñas -->
<dialog id="modalResenna" class="modal">
    <div class="modal-box bg-white rounded w-100" style="padding-left: 1%; padding-bottom: 1%; padding-right:1%">
        <button onclick="modalResenna.close()" class="btn btn-sm btn-circle bg-black text-white" 
            style="margin-left: 100%; margin-top: -5%;">✕</button>
        <h3 class="text-lg font-bold">Reseña del producto: @(Model.Producto.Nombre)</h3>
        <p class="py-1 italic" style="font-size: 10px;">Presione "ESC" en el teclado o haga clic en la X para cerrar esta ventana</p>
        
        <form id="formResenna" class="space-y-4 w-full" method="post" enctype="multipart/form-data">
            <!-- Generar el token antiforgery -->
            @Html.AntiForgeryToken()

            <!-- Producto -->
            <div class="form-control mb-3">
                <input type="hidden" name="IdProducto" value=@(Model.Producto.Id) />
            </div>

            <!-- Usuario -->
            <div class="form-control mb-3">
                <label class="label font-bold">Usuario: @(Model.UsuarioActual.UserName)</label>
                <input type="hidden" name="IdUsuario" value=@(Model.UsuarioActual.Id) />
                <input type="hidden" name="Usuario" value=@(Model.UsuarioActual.UserName) />
            </div>

            <!-- Comentario -->
            <div class="form-control mb-3 w-full">
                <label class="label font-bold mb-2">Comentario</label>
                <textarea name="Comentario" class="textarea textarea-bordered w-full" rows="3"></textarea>
            </div>
            <div id="error-comentario" class="mb-1 text-sm italic" style="color:red; font-size: small"></div>


            <!-- Fecha -->
            <div class="form-control mb-3">
                <label class="label font-bold">Fecha de la reseña: @hoy.ToString("dd-MM-yyyy")</label>
                <input type="hidden" name="FechaResenna" value="@hoy.ToString("yyyy-MM-dd")" />
            </div>

            <!-- Calificación -->
            <div class="form-control mb-4">
                <div class="flex flex-row gap gap-2 w-25">
                    <label class="label font-bold">Calificación</label>
                    <div class="star-rating">
                        <input type="radio" id="star5" name="Calificacion" value="5" />
                        <label for="star5">
                            <svg viewBox="0 0 24 24" class="w-6 h-6">
                                <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                         1.402 8.175L12 18.896l-7.336 3.861
                         1.402-8.175-5.934-5.782 8.2-1.192z" />
                            </svg>
                        </label>
                        <input type="radio" id="star4" name="Calificacion" value="4" />
                        <label for="star4">
                            <svg viewBox="0 0 24 24" class="w-6 h-6">
                                <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                         1.402 8.175L12 18.896l-7.336 3.861
                         1.402-8.175-5.934-5.782 8.2-1.192z" />
                            </svg>
                        </label>
                        <input type="radio" id="star3" name="Calificacion" value="3" />
                        <label for="star3">
                            <svg viewBox="0 0 24 24" class="w-6 h-6">
                                <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                         1.402 8.175L12 18.896l-7.336 3.861
                         1.402-8.175-5.934-5.782 8.2-1.192z" />
                            </svg>
                        </label>
                        <input type="radio" id="star2" name="Calificacion" value="2" />
                        <label for="star2">
                            <svg viewBox="0 0 24 24" class="w-6 h-6">
                                <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                         1.402 8.175L12 18.896l-7.336 3.861
                         1.402-8.175-5.934-5.782 8.2-1.192z" />
                            </svg>
                        </label>
                        <input type="radio" id="star1" name="Calificacion" value="1" />
                        <label for="star1">
                            <svg viewBox="0 0 24 24" class="w-6 h-6">
                                <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782
                         1.402 8.175L12 18.896l-7.336 3.861
                         1.402-8.175-5.934-5.782 8.2-1.192z" />
                            </svg>
                        </label>
                    </div>
                </div>

            </div>
            <div id="error-calificacion" class="mb-1 text-sm italic" style="color:red; font-size: small"></div>

            <!-- Input oculto para enviar True para el estado de la reseña-->
            <div class="form-control w-full">
                <input type="hidden" name="Estado" value="true" />
            </div>

            <!-- Botones "Cancelar" y "Enviar Reseña" -->
            <div class="flex flex-row gap gap-2 modal-action justify-between mb-3 w-full">
                <button type="button" class="btn btn-outline" onclick="modalResenna.close()">Cancelar</button>
                <button type="submit" class="btn btn-primary">Enviar reseña</button>
            </div>
        </form>
    </div>
</dialog>



@section Scripts {
    <!-- Script para manejar el carrusel de imágenes del producto -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const totalSlides = @Model.Producto.ImagenesProducto.Count;
            let currentSlide = 1;

            function mostrarSlide(n) {
                // Ocultar todos
                document.querySelectorAll('.carousel-item').forEach(div => div.classList.add('hidden'));
                // Mostrar el actual
                const actual = document.getElementById(`slide${n}`);
                if (actual) actual.classList.remove('hidden');

                // Actualizar botones
                actualizarBotonActivo(`#slide${n}`);
            }

            function actualizarBotonActivo(hash) {
                document.querySelectorAll('.btn-xs').forEach(btn => {
                    if (btn.getAttribute('href') === hash) {
                        btn.classList.add('bg-[#004AAD]', 'text-white');
                        btn.classList.remove('bg-base-200', 'text-black');
                    } else {
                        btn.classList.remove('bg-[#004AAD]', 'text-white');
                        btn.classList.add('bg-base-200', 'text-black');
                    }
                });
            }

            // Botones numerados
            document.querySelectorAll('.btn-xs').forEach(btn => {
                btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    const hash = this.getAttribute('href');
                    const match = hash.match(/#slide(\d+)/);
                    if (match) {
                        currentSlide = parseInt(match[1]);
                        mostrarSlide(currentSlide);
                    }
                });
            });

            // Mostrar slide inicial
            mostrarSlide(currentSlide);

        });
    </script>

    <!-- Script para cargar las reseñas del producto por medio de AJAX-->
    <script>
        fetch('/ResennaValoracion/GetResennasPorProducto?idProducto=@Model.Producto.Id')
            .then(response => response.text())
            .then(html => {
                document.getElementById("zona-resennas").innerHTML = html;
            })
            .catch(error => {
                document.getElementById("zona-resennas").innerHTML = "<p>Error cargando reseñas.</p>";
            });
    </script>

    <!-- Script para escuchar el evento submit del formulario para crear la Resenna -->
    <script src="~/js/DetailProducto.js"></script>

}
