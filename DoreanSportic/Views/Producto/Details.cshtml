@model DoreanSportic.Application.DTOs.ProductoDTO

@{
    ViewData["Title"] = "Details";
}


<div class="py-4 flex flex-row gap-5">
    <div class="flex flex-col gap-2">
        <a class="btn btn-sm btn-outline bg-[#006400] text-white w-50" asp-action="Index">Volver al listado</a>
        <h1><b>DETALLE DEL PRODUCTO</b></h1>
        <div class="flex flex-row gap-5">
            <div class="justify-start">
                @*     @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
 *@    </div>
            <div class="ml-auto">
            </div>
        </div>
        <!-- Cargar los cards de los productos -->
        <div class="card card-side flex-row bg-base shadow-lg rounded-3">

            <figure class="w-1/3 p-4 flex flex-col items-start justify-center">
                <div class="carousel w-75 rounded-xl">
                    @for (int i = 0; i < Model.ImagenesProducto.Count; i++)
                    {
                        var img = Model.ImagenesProducto.ElementAt(i).Imagen;
                        var id = $"slide{i + 1}";
                        <div id="@id" class="carousel-item hidden w-full h-full flex justify-center items-center">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(img)"
                                 class="w-full h-50 object-contain rounded-xl" />
                        </div>
                    }
                </div>

                <!-- Navegación del carrusel -->
                <div class="flex justify-center mt-2 gap-2 mt-2">
                    @for (int i = 0; i < Model.ImagenesProducto.Count; i++)
                    {
                        var id = $"slide{i + 1}";
                        <a href="#@id" class="btn btn-xs">@(i + 1)</a>
                    }
                </div>
            </figure>

            <div class="card-body w-100">
                <div class="flex flex-row gap gap-1">
                    <div class="badge bg-primary text-white">@(Model.IdCategoriaNavigation.Nombre.ToUpper())</div>
                    <div class="badge bg-[#000000] text-white">@(Model.IdMarcaNavigation.Nombre.ToUpper())</div>
                    <div class="badge bg-[#50C878] text-white">DISPONIBLE</div>
                    <!-- Código Razor para mostrar el badge de "EN OFERTA" en caso de que
                        exista una promoción
                    -->
                    @if ((Model.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false) ||
                    (Model.IdCategoriaNavigation?.IdPromocion?.Any(p => p.FechaInicio <= DateTime.Today && p.FechaFin >= DateTime.Today) ?? false))
                    {
                        <div class="badge badge-secondary">OFERTA</div>
                    }
                </div>

                <h2 class="card-title text-xl font-semibold">
                    @Html.DisplayFor(model => model.Nombre)
                </h2>
                @{
                    decimal precioBase = Model.PrecioBase;
                    DateTime hoy = DateTime.Today;

                    // Obtener promociones activas por producto
                    var promoProducto = Model.IdPromocion
                    .FirstOrDefault(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);

                    var descuentoProducto = promoProducto?.PorcentajeDescuento ?? 0;

                    // Obtener promociones activas por categoría (si existen)
                    var promoCategoria = Model.IdCategoriaNavigation?.IdPromocion
                    .FirstOrDefault(p => p.FechaInicio <= hoy && p.FechaFin >= hoy);

                    var descuentoCategoria = promoCategoria?.PorcentajeDescuento ?? 0;

                    // Sumar ambos descuentos
                    var descuentoTotal = descuentoProducto + descuentoCategoria;

                    // Límite opcional a 100%
                    if (descuentoTotal > 100) descuentoTotal = 100;
                    var precioConDescuento = precioBase - (precioBase * descuentoTotal / 100);
                }

                @if (descuentoTotal > 0)
                {
                    <div class="p-2 w-75 flex flex-col ml-2 gap gap-1 rounded-lg border border-base-300">
                        <div class="text-xs text-gray-400">
                            <b>Precio anterior: </b><span class="line-through">₡@precioBase</span>
                        </div>
                        <div class="flex flex-row gap gap-1">
                            <b>Precio en oferta: </b>
                            <div class="badge badge-xl bg-success text-black font-bold">
                                ₡@precioConDescuento.ToString("N2") + I.V.A
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="flex flex-row gap gap-1">
                        <b class="mt-1">Precio base: </b>
                        <div class="badge badge-outline w-fit">
                            ₡@precioBase.ToString("N2") + I.V.A
                        </div>
                    </div>

                }
                <p class="text-base bg-base w-auto">
                    @Html.DisplayFor(model => model.Descripcion)
                </p>

            </div>
        </div>
    </div>

    <!-- Cargar las reseñas de los usuarios-->
    <div id="zona-resennas">
        <p class="text-sm">Cargando reseñas...</p>
    </div>


</div>



@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const totalSlides = @Model.ImagenesProducto.Count;
            let currentSlide = 1;

            function mostrarSlide(n) {
                // Ocultar todos
                document.querySelectorAll('.carousel-item').forEach(div => div.classList.add('hidden'));
                // Mostrar el actual
                const actual = document.getElementById(`slide${n}`);
                if (actual) actual.classList.remove('hidden');

                // Actualizar botones
                actualizarBotonActivo(`#slide${n}`);
            }

            function actualizarBotonActivo(hash) {
                document.querySelectorAll('.btn-xs').forEach(btn => {
                    if (btn.getAttribute('href') === hash) {
                        btn.classList.add('bg-[#004AAD]', 'text-white');
                        btn.classList.remove('bg-base-200', 'text-black');
                    } else {
                        btn.classList.remove('bg-[#004AAD]', 'text-white');
                        btn.classList.add('bg-base-200', 'text-black');
                    }
                });
            }

            // Botones numerados
            document.querySelectorAll('.btn-xs').forEach(btn => {
                btn.addEventListener('click', function (e) {
                    e.preventDefault();
                    const hash = this.getAttribute('href');
                    const match = hash.match(/#slide(\d+)/);
                    if (match) {
                        currentSlide = parseInt(match[1]);
                        mostrarSlide(currentSlide);
                    }
                });
            });

            // Mostrar slide inicial
            mostrarSlide(currentSlide);
        });
    </script>

@*     Script para cargar las reseñas del producto
 *@    <script>
        fetch('/ResennaValoracion/GetResennasPorProducto?idProducto=@Model.Id')
            .then(response => response.text())
            .then(html => {
                document.getElementById("zona-resennas").innerHTML = html;
            })
            .catch(error => {
                document.getElementById("zona-resennas").innerHTML = "<p>Error cargando reseñas.</p>";
            });
    </script>

}
