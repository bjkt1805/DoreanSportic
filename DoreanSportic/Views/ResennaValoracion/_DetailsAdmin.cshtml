@model DoreanSportic.Application.DTOs.ResennaValoracionDTO
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<div class ="py-4">
    <a class="btn btn-sm btn-outline bg-[#006400] text-white w-50 mb-1" onclick="cargarVista('/ResennaValoracion/IndexAdmin')">
        @(Localizer["Volver al listado"])
    </a>
    <h1 class="pt-2">
        <b>
            @(Localizer["DETALLES DE LA RESEÑA"])
            
        </b>
    </h1>
</div>

<div class="mb-4 card bg-base-100 shadow-lg max-h-96 overflow-y-auto w-100">

    <div class="card-body">

        <div class="border-b border-base-300 pb-2 mb-2">
            @if (Model.Reportada == true)
            {
                <span class="badge bg-warning mb-1 italic">@Localizer["Reportada"]</span>
            }
            <div class="flex flex-row justify-between gap gap-1">
                <p class="font-bold italic" style="color:#004AAD">@@@Model.IdUsuarioNavigation.UserName<p>
                <span class="text-xs">@Model.FechaResenna.ToString("dd-MM-yyyy")</span>
            </div>
            <br />
            <p class="mt-2 font-bold">@Model.IdProductoNavigation.Nombre</p>
            <br />
            <figure class="px-10 pt-10 h-48 flex justify-center items-center">
                <img style="width:70%; height: 80%"
                    src="data:image/jpeg;base64,@Convert.ToBase64String(Model.IdProductoNavigation.PrimeraImagen ?? Array.Empty<byte>())"
                     alt=@(Localizer["Ropa/accesorios deportivos"])
                     class=" h-full object-contain rounded-xl" />
            </figure>
            <p class="mt-2 italic">"@Model.Comentario"</p>
            <br />
            <div class="flex gap-1">
                <!-- Mapeo de calificación con estrellas -->
                @for (int i = 1; i <= 5; i++)
                {
                    var isActive = i <= Model.Calificacion;
                    var fillColor = isActive ? "text-warning" : "text-gray-300";
                    var animationClass = isActive ? "animate-bounce" : "";

                    <svg xmlns="http://www.w3.org/2000/svg"
                         fill="currentColor"
                         viewBox="0 0 24 24"
                         stroke="none"
                         class="@($"w-5 h-5 {fillColor} {animationClass} transition-all duration-300")">
                        <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.782 1.402 8.175L12 18.896l-7.336 3.861 1.402-8.175-5.934-5.782 8.2-1.192z" />
                    </svg>
                }
            </div>

            @* --- Toggle visible solo si la reseña está reportada --- *@
            @if (Model.Reportada == true)
            {
                <div class="mt-4 form-control w-fit" id="wrap-toggle-estado-resenna">
                    <label class="label">
                        <span class="label-text font-bold text-black mb-1">
                            @(Localizer["Estado"])
                        </span>
                    </label>

                    <div class="flex items-center gap-2">
                        <span>@(Localizer["Oculta"])</span>

                        <input type="checkbox"
                               id="toggleEstadoResenna"
                               class="toggle border-black bg-white checked:border-primary checked:bg-primary checked:text-white"
                               @(Model.Estado ? "checked" : "")
                               data-resenna-id="@Model.Id" />

                        <span>@(Localizer["Visible"])</span>
                    </div>
                </div>

                @* Form oculto para AntiForgery e Id *@
                <form id="formToggleEstadoResenna" method="post" class="hidden">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="resennaIdToggle" value="@Model.Id" />
                </form>
            }
        </div>
    </div>
</div>
