@model IEnumerable<DoreanSportic.Application.DTOs.PedidoDetalleDTO>
@using System.Globalization
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    var cultura = (CultureInfo)CultureInfo.InvariantCulture.Clone();
    cultura.NumberFormat.NumberGroupSeparator = " ";
    cultura.NumberFormat.NumberDecimalSeparator = ".";
    // Saca pedidoId de ViewData o del primer item si lo traes
    var pedidoId = (int)(ViewData["PedidoId"] ?? 0);
}

<div class="overflow-x-auto rounded-box border border-base-content/5 bg-base-100">
    <table class="table">
        <thead class="bg-primary text-white">
            <tr>
                <th>@Localizer["Producto"]</th>
                <th class="text-center">@Localizer["Cantidad"]</th>
                <th class="text-end">@Localizer["Precio unitario"]</th>
                <th class="text-end">@Localizer["Subtotal"]</th>
                <th class="text-center"></th>
                <th class="text-center"></th>
            </tr>
        </thead>
        <tbody id="pedido-detalles-body">
            @foreach (var item in Model)
            {
                var producto = item.IdProductoNavigation;
                // precio estimado mostrado (tu subtotal / cantidad cuando carga por primera vez)
                var precioUnitEstimado = item.Cantidad > 0 ? (item.SubTotal / item.Cantidad) : 0m;

                <tr data-detalle-id="@item.Id">
                    <td>
                        <div class="font-semibold text-sm">@producto?.Nombre</div>
                    </td>
                    <td class="text-center" style="width:120px">
                        <input class="input input-bordered w-24 qty-input" type="number" min="0" step="1" value="@item.Cantidad" />
                    </td>
                    <td class="text-end cell-punit">₡@precioUnitEstimado.ToString("N2", cultura)</td>
                    <td class="text-end cell-subtotal">₡@item.SubTotal.ToString("N2", cultura)</td>
                    <td class="text-center">
                        <button class="btn btn-warning btn-xs text-black">@Localizer["Modificar"]</button>
                    </td>
                    <td class="text-center">
                        <button class="btn btn-xs text-white bg-[#FF4D4D]">@Localizer["Eliminar"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@{
    // totales iniciales (servidos por el server si los calculaste antes)
    var subIni = Model.Sum(x => x.SubTotal);
    var impIni = Math.Round(subIni * 0.13m, 2, MidpointRounding.AwayFromZero);
    var totIni = subIni + impIni;
}

<div class="mt-3 text-right space-y-1">
    <div><b>@Localizer["Total sin impuestos"]:</b> <span id="totals-sub">₡@subIni.ToString("N2", cultura)</span></div>
    <div><b>@Localizer["Impuesto"]:</b> <span id="totals-tax">₡@impIni.ToString("N2", cultura)</span></div>
    <div class="text-lg"><b>@Localizer["Total"]:</b> <span id="totals-grand">₡@totIni.ToString("N2", cultura)</span></div>
</div>

<div class="mt-4 flex gap-2 justify-end p-2">
    <button id="btn-confirmar" class="btn btn-primary">@Localizer["Registrar pedido"]</button>
</div>

<script>
    (function(){
      const pedidoId = @pedidoId;

      const token = document.querySelector('#pedido-encabezado-form input[name="__RequestVerificationToken"]')?.value;
      const body  = document.getElementById('pedido-detalles-body');

      let t=null; const debounce = (fn,ms)=>{ clearTimeout(t); t=setTimeout(fn,ms); };

      function formato(n){ return `₡${Number(n).toFixed(2)}`; }

      function actualizarTotales(tot){
        if(!tot) return;
        document.getElementById('totals-sub').textContent   = formato(tot.sub);
        document.getElementById('totals-tax').textContent   = formato(tot.imp);
        document.getElementById('totals-grand').textContent = formato(tot.total);
      }

      // Cambiar cantidad (0 => eliminar)
      body?.addEventListener('input', (e)=>{
        if(!e.target.classList.contains('qty-input')) return;
        const tr = e.target.closest('tr');
        const detalleId = tr.dataset.detalleId;
        const cantidad = parseInt(e.target.value || '0', 10);
        if(isNaN(cantidad) || cantidad < 0){ e.target.value = 0; return; }

        debounce(async ()=>{
          const form = new FormData();
          form.append('detalleId', detalleId);
          form.append('cantidad',  cantidad);

          const r = await fetch('/PedidoDetalle/ActualizarCantidad', {
            method: 'POST',
            headers: { 'RequestVerificationToken': token },
            body: form
          });
          const data = await r.json();

          if(!data.success){ return; }

          if(data.eliminado){
            tr.remove();
          } else if(data.det){
            // Subtotal de la fila
            tr.querySelector('.cell-subtotal').textContent = formato(data.det.subTotal);
            // P.unitario estimado (sub / cant)
            const punit = data.det.cantidad > 0 ? (data.det.subTotal / data.det.cantidad) : 0;
            tr.querySelector('.cell-punit').textContent = formato(punit);
          }
          actualizarTotales(data.totals);
        }, 350);
      });

      // Eliminar por botón
      body?.addEventListener('click', async (e)=>{
        if(!e.target.classList.contains('btn-eliminar')) return;
        const tr = e.target.closest('tr');
        const detalleId = tr.dataset.detalleId;

        const form = new FormData();
        form.append('detalleId', detalleId);
        form.append('pedidoId',  pedidoId);

        const r = await fetch('/PedidoDetalle/EliminarDetalle', {
          method: 'POST',
          headers: { 'RequestVerificationToken': token },
          body: form
        });
        const data = await r.json();
        if(data.success){
          tr.remove();
          actualizarTotales(data.totals);
        }
      });

      // Confirmar
      document.getElementById('btn-confirmar')?.addEventListener('click', async ()=>{
        const form = new FormData();
        form.append('pedidoId', pedidoId);
        const r = await fetch('/Pedido/Confirmar', {
          method:'POST',
          headers: { 'RequestVerificationToken': token },
          body: form
        });
        const data = await r.json();
        if(!data.success){
          if(data.errores?.length){
            const msg = data.errores.map(e => `• ${e.nombre}: solicitado ${e.cant}, disponible ${e.stockDisp}`).join('\n');
            alert(msg);
          } else {
            alert(data.mensaje ?? 'No fue posible confirmar');
          }
          return;
        }
        actualizarTotales(data.totals);
        alert('Pedido registrado');
        location.reload();
      });
    })();
</script>
