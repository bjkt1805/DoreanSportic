<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Dirección" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Teléfono" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Vuelto" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="Número inválido" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="Encabezado guardado" xml:space="preserve">
    <value>Header saved</value>
  </data>
  <data name="Seleccione una provincia" xml:space="preserve">
    <value>Select a province</value>
  </data>
  <data name="Debe tener 16 dígitos" xml:space="preserve">
    <value>Must have 16 digits</value>
  </data>
  <data name="Seleccione un distrito" xml:space="preserve">
    <value>Select a district</value>
  </data>
  <data name="Confirmar pago" xml:space="preserve">
    <value>Confirm payment</value>
  </data>
  <data name="Impuesto (13%):" xml:space="preserve">
    <value>Tax (13%): </value>
  </data>
  <data name="Monto entregado (₡)" xml:space="preserve">
    <value>Amount delivered (₡)</value>
  </data>
  <data name="Monto inválido" xml:space="preserve">
    <value>Invalid amount</value>
  </data>
  <data name="Como aparece en la tarjeta" xml:space="preserve">
    <value>As it appears on the card</value>
  </data>
  <data name="Nombre del titular" xml:space="preserve">
    <value>Name of the holder</value>
  </data>
  <data name="MM/AA" xml:space="preserve">
    <value>MM/YY</value>
  </data>
  <data name="Fecha de expiración (MM/AA)" xml:space="preserve">
    <value>Expiration date (MM/YY)</value>
  </data>
  <data name="Número de tarjeta" xml:space="preserve">
    <value>Card number</value>
  </data>
  <data name="Método de pago" xml:space="preserve">
    <value>Payment method</value>
  </data>
  <data name="Elija un método de pago y complete los datos" xml:space="preserve">
    <value>Choose a payment method and complete the details</value>
  </data>
  <data name="El monto debe ser mayor o igual al total" xml:space="preserve">
    <value>The amount must be greater than or equal to the total</value>
  </data>
  <data name="El nombre es requerido." xml:space="preserve">
    <value>Name is required.</value>
  </data>
  <data name="PROCESAR PAGO" xml:space="preserve">
    <value>PROCESS PAYMENT</value>
  </data>
  <data name="Cantón" xml:space="preserve">
    <value>Canton</value>
  </data>
  <data name="Dirección de envío (el envío es gratis)" xml:space="preserve">
    <value>Shipping address (shipping is free)</value>
  </data>
  <data name="Mostrar detalle del cliente" xml:space="preserve">
    <value>Show customer details</value>
  </data>
  <data name="Cliente" xml:space="preserve">
    <value>Customer</value>
  </data>
  <data name="Distrito" xml:space="preserve">
    <value>District</value>
  </data>
  <data name="Estado de pago" xml:space="preserve">
    <value>Payment status</value>
  </data>
  <data name="Error inesperado" xml:space="preserve">
    <value>Unexpected error</value>
  </data>
  <data name="Error inesperado al pagar" xml:space="preserve">
    <value>Unexpected error when paying</value>
  </data>
  <data name="Error al procesar la compra" xml:space="preserve">
    <value>Error processing purchase</value>
  </data>
  <data name="Error al procesar el pedido" xml:space="preserve">
    <value>Error processing order</value>
  </data>
  <data name="No fue posible guardar" xml:space="preserve">
    <value>It was not possible to save</value>
  </data>
  <data name="Cargando detalles del pedido" xml:space="preserve">
    <value>Loading order details</value>
  </data>
  <data name="Otras señas" xml:space="preserve">
    <value>Other signs</value>
  </data>
  <data name="Fecha inválida o vencida (MM/AA)." xml:space="preserve">
    <value>Invalid or expired date (MM/YY).</value>
  </data>
  <data name="Formato de 24 horas" xml:space="preserve">
    <value>24-hour format</value>
  </data>
  <data name="Pago completado. ¡Gracias!" xml:space="preserve">
    <value>Payment completed. Thank you!</value>
  </data>
  <data name="Provincia" xml:space="preserve">
    <value>Province</value>
  </data>
  <data name="Tarjeta (Crédito/Débito)" xml:space="preserve">
    <value>Credit/Debit card</value>
  </data>
  <data name="Seleccione un cantón" xml:space="preserve">
    <value>Select a canton</value>
  </data>
  <data name="Hora de emisión" xml:space="preserve">
    <value>Creation time</value>
  </data>
  <data name="Fecha del pedido" xml:space="preserve">
    <value>Order date</value>
  </data>
  <data name="Pedido" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="Ej: 200m norte de ..." xml:space="preserve">
    <value>Eg: 200m north of...</value>
  </data>
  <data name="INFORMACIÓN DEL CLIENTE" xml:space="preserve">
    <value>CUSTOMER INFORMATION</value>
  </data>
  <data name="Cancelar" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Correo electrónico" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="CVV inválido (3 o 4 dígitos)." xml:space="preserve">
    <value>Invalid CVV (3 or 4 digits).</value>
  </data>
  <data name="Correo" xml:space="preserve">
    <value>Email</value>
  </data>
</root>